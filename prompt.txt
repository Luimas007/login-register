Below is server.js
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bcrypt = require("bcrypt");
const bodyParser = require("body-parser");
const path = require("path");
const crypto = require("crypto");
const multer = require("multer");
const { Resend } = require("resend");
const jwt = require("jsonwebtoken");
require("dotenv").config();

const app = express();
const PORT = 5000;

// Configure storage for uploaded files
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "C:/Users/Public/uploads");
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});
const upload = multer({ storage: storage });

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "public")));

// MongoDB connection
mongoose
  .connect("mongodb://127.0.0.1:27017/auth_demo", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("✅ MongoDB connected"))
  .catch((err) => console.error("❌ MongoDB connection error:", err));

// Auth middleware
const authenticateToken = (req, res, next) => {
  const token = req.headers["authorization"];
  if (!token) return res.sendStatus(401);
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// Models
const UserSchema = new mongoose.Schema({
  username: String,
  email: { type: String, unique: true },
  password: String,
  rollNo: String,
  phone: String,
  department: String,
  idCard: String,
  verified: { type: Boolean, default: false },
  resetToken: String,
  resetTokenExpiry: Date,
});
const User = mongoose.model("User", UserSchema);

const PostSchema = new mongoose.Schema({
  type: { type: String, enum: ["lost", "found"], required: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  place: String,
  time: String,
  date: Date,
  image: String,
  createdAt: { type: Date, default: Date.now },
  status: { type: String, default: "Pending" },
});
const Post = mongoose.model("Post", PostSchema);

// In-memory OTP store
let otpStore = {};

// Resend setup
const resend = new Resend(process.env.RESEND_API_KEY);

// HTML Routes
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

app.get("/login", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "login.html"));
});

app.get("/register", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "register.html"));
});

app.get("/forgot-password", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "forgot-password.html"));
});

app.get("/reset-password", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "reset-password.html"));
});

app.get("/profile", authenticateToken, (req, res) => {
  res.sendFile(path.join(__dirname, "public", "profile.html"));
});

app.get("/post-lost", authenticateToken, (req, res) => {
  res.sendFile(path.join(__dirname, "public", "post-lost.html"));
});

app.get("/post-found", authenticateToken, (req, res) => {
  res.sendFile(path.join(__dirname, "public", "post-found.html"));
});

// New endpoint to get all items
app.get("/api/all-items", async (req, res) => {
  try {
    const lostItems = await Post.find({ type: "lost" }).sort({ createdAt: -1 });
    const foundItems = await Post.find({ type: "found" }).sort({
      createdAt: -1,
    });

    res.json({
      lostItems,
      foundItems,
    });
  } catch (error) {
    console.error("Error fetching items:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// Register with OTP send
app.post("/api/register", upload.single("idCard"), async (req, res) => {
  const { username, email, password, rollNo, phone, department } = req.body;
  const idCard = req.file ? "/uploads/" + req.file.filename : null;

  if (
    !username ||
    !email ||
    !password ||
    !rollNo ||
    !phone ||
    !department ||
    !idCard
  ) {
    return res.status(400).json({ message: "All fields are required." });
  }

  const existing = await User.findOne({ email });
  if (existing)
    return res.status(400).json({ message: "Email already registered." });

  const hashedPassword = await bcrypt.hash(password, 10);
  const otp = crypto.randomInt(100000, 999999).toString();
  const expiry = Date.now() + 5 * 60 * 1000;

  otpStore[email] = {
    username,
    password: hashedPassword,
    otp,
    expiry,
    rollNo,
    phone,
    department,
    idCard,
  };

  try {
    await resend.emails.send({
      from: "Auth System <onboarding@resend.dev>",
      to: email,
      subject: "Your OTP Code",
      text: `Your OTP is ${otp}. It will expire in 5 minutes.\n\nFor testing, you can also use the default OTP: 123456`,
    });

    res.json({ message: "OTP sent to your email." });
  } catch (error) {
    console.error("❌ Email sending failed:", error);
    res.status(500).json({ message: "Failed to send OTP." });
  }
});

// OTP Verification (updated to accept default code 123456)
app.post("/api/verify-otp", async (req, res) => {
  const { email, otp } = req.body;
  const record = otpStore[email];

  if (!record)
    return res
      .status(400)
      .json({ message: "No OTP request found for this email." });

  // Check if either the stored OTP or the default "123456" matches
  const isOtpValid = otp === "123456" || otp === record.otp;

  if (!isOtpValid) return res.status(400).json({ message: "Invalid OTP." });

  if (otp !== "123456" && Date.now() > record.expiry)
    return res.status(400).json({ message: "OTP has expired." });

  const user = new User({
    username: record.username,
    email,
    password: record.password,
    rollNo: record.rollNo,
    phone: record.phone,
    department: record.department,
    idCard: record.idCard,
    verified: true,
  });

  await user.save();
  delete otpStore[email];

  res.json({ message: "Registration complete. You can now log in." });
});

// Login
app.post("/api/login", async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password)
    return res.status(400).json({ message: "All fields are required." });

  const user = await User.findOne({ email });
  if (!user)
    return res.status(401).json({ message: "Invalid email or password." });
  if (!user.verified)
    return res.status(401).json({ message: "Please verify your email first." });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch)
    return res.status(401).json({ message: "Invalid email or password." });

  const token = jwt.sign(
    { userId: user._id, email: user.email },
    process.env.JWT_SECRET,
    { expiresIn: "2h" }
  );

  res.json({
    message: `Welcome, ${user.username}!`,
    token,
    user: {
      id: user._id,
      username: user.username,
      email: user.email,
      rollNo: user.rollNo,
      phone: user.phone,
      department: user.department,
      idCard: user.idCard,
    },
  });
});

// Forgot password
app.post("/api/forgot-password", async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: "Email is required." });

  const user = await User.findOne({ email });
  if (!user) return res.status(404).json({ message: "User not found." });

  const resetToken = crypto.randomBytes(20).toString("hex");
  const resetTokenExpiry = Date.now() + 3600000; // 1 hour expiration

  user.resetToken = resetToken;
  user.resetTokenExpiry = resetTokenExpiry;
  await user.save();

  const resetUrl = `http://localhost:${PORT}/reset-password?token=${resetToken}`;

  try {
    await resend.emails.send({
      from: "Auth System <onboarding@resend.dev>",
      to: email,
      subject: "Password Reset Request",
      text: `Click this link to reset your password: ${resetUrl}\n\nThis link will expire after use or in 1 hour.`,
    });

    res.json({ message: "Password reset link sent to your email." });
  } catch (error) {
    console.error("❌ Email sending failed:", error);
    res.status(500).json({ message: "Failed to send reset email." });
  }
});

// Reset password (with single-use token implementation)
app.post("/api/reset-password", async (req, res) => {
  const { token, newPassword } = req.body;

  if (!token || !newPassword) {
    return res
      .status(400)
      .json({ message: "Token and new password are required." });
  }

  const user = await User.findOne({
    resetToken: token,
    resetTokenExpiry: { $gt: Date.now() },
  });

  if (!user) {
    return res.status(400).json({
      message:
        "Invalid or expired token. Please request a new password reset link.",
    });
  }

  try {
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    user.resetToken = undefined; // Clear the token after use
    user.resetTokenExpiry = undefined; // Clear the expiry after use
    await user.save();

    res.json({
      message:
        "Password updated successfully. You can now login with your new password.",
    });
  } catch (error) {
    console.error("Password reset error:", error);
    res.status(500).json({ message: "Server error during password reset" });
  }
});

// Profile route (protected)
app.get("/api/profile", authenticateToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select(
      "-password -resetToken -resetTokenExpiry"
    );
    if (!user) return res.status(404).json({ message: "User not found." });

    // Get user's posts
    const posts = await Post.find({ userId: user._id }).sort({ createdAt: -1 });

    res.json({
      user,
      posts,
    });
  } catch (error) {
    console.error("Profile error:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// Get user posts
app.get("/api/user-posts", authenticateToken, async (req, res) => {
  try {
    const posts = await Post.find({ userId: req.user.userId }).sort({
      createdAt: -1,
    });
    res.json(posts);
  } catch (error) {
    console.error("Posts error:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// Report Lost Item
app.post(
  "/api/report-lost",
  authenticateToken,
  upload.single("image"),
  async (req, res) => {
    const { place, time, date } = req.body;
    const image = req.file ? "/uploads/" + req.file.filename : null;

    if (!place || !time || !date || !image) {
      return res.status(400).json({ message: "All fields are required." });
    }

    try {
      const post = new Post({
        type: "lost",
        userId: req.user.userId,
        place,
        time,
        date,
        image,
      });

      await post.save();
      res.json({ message: "Lost item reported successfully.", post });
    } catch (error) {
      console.error("Report lost error:", error);
      res.status(500).json({ message: "Server error" });
    }
  }
);

// Report Found Item
app.post(
  "/api/report-found",
  authenticateToken,
  upload.single("image"),
  async (req, res) => {
    const { place, time, date } = req.body;
    const image = req.file ? "/uploads/" + req.file.filename : null;

    if (!place || !time || !date || !image) {
      return res.status(400).json({ message: "All fields are required." });
    }

    try {
      const post = new Post({
        type: "found",
        userId: req.user.userId,
        place,
        time,
        date,
        image,
      });

      await post.save();
      res.json({ message: "Found item reported successfully.", post });
    } catch (error) {
      console.error("Report found error:", error);
      res.status(500).json({ message: "Server error" });
    }
  }
);

// Start server
app.listen(PORT, () => {
  console.log(`🚀 Server running at http://localhost:${PORT}`);
});

below is script.js
document.addEventListener("DOMContentLoaded", () => {
  // Common elements and functions
  const showMessage = (message, type) => {
    const messageDiv = document.getElementById("message");
    if (messageDiv) {
      messageDiv.textContent = message;
      messageDiv.className = `alert alert-${type}`;
      messageDiv.style.display = "block";

      setTimeout(() => {
        messageDiv.style.display = "none";
      }, 5000);
    }
  };

  // Check authentication for protected pages
  const checkAuth = () => {
    const token = localStorage.getItem("token");
    if (
      !token &&
      (window.location.pathname.includes("profile") ||
        window.location.pathname.includes("post-lost") ||
        window.location.pathname.includes("post-found"))
    ) {
      window.location.href = "/login.html";
      return false;
    }
    return token;
  };

  // Set up logout functionality
  const logoutElements = document.querySelectorAll("#logout");
  if (logoutElements.length > 0) {
    logoutElements.forEach((element) => {
      element.addEventListener("click", (e) => {
        e.preventDefault();
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        window.location.href = "/login.html";
      });
    });
  }

  // Registration form
  const registerForm = document.getElementById("register-form");
  if (registerForm) {
    registerForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(registerForm);

      try {
        const res = await fetch("/api/register", {
          method: "POST",
          body: formData,
        });

        const data = await res.json();
        showMessage(data.message, res.ok ? "success" : "danger");

        if (res.ok && data.message.includes("OTP sent")) {
          localStorage.setItem(
            "pendingEmail",
            document.getElementById("email").value
          );
          setTimeout(() => (window.location.href = "/otp.html"), 1500);
        }
      } catch (error) {
        showMessage("An error occurred. Please try again.", "danger");
        console.error("Registration error:", error);
      }
    });
  }

  // OTP Verification
  const otpForm = document.getElementById("otp-form");
  if (otpForm) {
    otpForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const otp = document.getElementById("otp").value;
      const email = localStorage.getItem("pendingEmail");

      try {
        const res = await fetch("/api/verify-otp", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, otp }),
        });

        const data = await res.json();
        showMessage(data.message, res.ok ? "success" : "danger");

        if (res.ok && data.message.includes("complete")) {
          localStorage.removeItem("pendingEmail");
          setTimeout(() => (window.location.href = "/login.html"), 2000);
        }
      } catch (error) {
        showMessage("An error occurred. Please try again.", "danger");
        console.error("OTP verification error:", error);
      }
    });
  }

  // Login form
  const loginForm = document.getElementById("login-form");
  if (loginForm) {
    loginForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const email = document.getElementById("email").value;
      const password = document.getElementById("password").value;

      try {
        const res = await fetch("/api/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, password }),
        });

        const data = await res.json();
        showMessage(data.message, res.ok ? "success" : "danger");

        if (res.ok) {
          localStorage.setItem("token", data.token);
          localStorage.setItem("user", JSON.stringify(data.user));
          setTimeout(() => {
            window.location.href = "/profile.html";
          }, 1500);
        }
      } catch (error) {
        showMessage("An error occurred. Please try again.", "danger");
        console.error("Login error:", error);
      }
    });
  }

  // Forgot Password
  const forgotPasswordForm = document.getElementById("forgot-password-form");
  if (forgotPasswordForm) {
    forgotPasswordForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const email = document.getElementById("email").value;

      try {
        const res = await fetch("/api/forgot-password", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email }),
        });

        const data = await res.json();
        showMessage(data.message, res.ok ? "success" : "danger");

        if (res.ok) {
          setTimeout(() => (window.location.href = "/login.html"), 3000);
        }
      } catch (error) {
        showMessage("An error occurred. Please try again.", "danger");
        console.error("Forgot password error:", error);
      }
    });
  }

  // Reset Password
  const resetPasswordForm = document.getElementById("reset-password-form");
  if (resetPasswordForm) {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get("token");

    if (token) {
      document.getElementById("token").value = token;
    }

    resetPasswordForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const token = document.getElementById("token").value;
      const newPassword = document.getElementById("newPassword").value;
      const confirmPassword = document.getElementById("confirmPassword").value;

      if (newPassword !== confirmPassword) {
        showMessage("Passwords do not match.", "danger");
        return;
      }

      try {
        const res = await fetch("/api/reset-password", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ token, newPassword }),
        });

        const data = await res.json();
        showMessage(data.message, res.ok ? "success" : "danger");

        if (res.ok) {
          setTimeout(() => (window.location.href = "/login.html"), 2000);
        }
      } catch (error) {
        showMessage("An error occurred. Please try again.", "danger");
        console.error("Reset password error:", error);
      }
    });
  }

  // Lost Item Report
  const lostForm = document.getElementById("lost-form");
  if (lostForm) {
    if (!checkAuth()) return;

    lostForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData();
      formData.append("place", document.getElementById("place").value);
      formData.append("time", document.getElementById("time").value);
      formData.append("date", document.getElementById("date").value);
      formData.append("image", document.getElementById("image").files[0]);

      try {
        const token = localStorage.getItem("token");
        const res = await fetch("/api/report-lost", {
          method: "POST",
          headers: {
            Authorization: token,
          },
          body: formData,
        });

        const data = await res.json();
        showMessage(data.message, res.ok ? "success" : "danger");

        if (res.ok) {
          setTimeout(() => {
            window.location.href = "/profile.html";
          }, 1500);
        }
      } catch (error) {
        showMessage("An error occurred. Please try again.", "danger");
        console.error("Lost item report error:", error);
      }
    });
  }

  // Found Item Report
  const foundForm = document.getElementById("found-form");
  if (foundForm) {
    if (!checkAuth()) return;

    foundForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData();
      formData.append("place", document.getElementById("place").value);
      formData.append("time", document.getElementById("time").value);
      formData.append("date", document.getElementById("date").value);
      formData.append("image", document.getElementById("image").files[0]);

      try {
        const token = localStorage.getItem("token");
        const res = await fetch("/api/report-found", {
          method: "POST",
          headers: {
            Authorization: token,
          },
          body: formData,
        });

        const data = await res.json();
        showMessage(data.message, res.ok ? "success" : "danger");

        if (res.ok) {
          setTimeout(() => {
            window.location.href = "/profile.html";
          }, 1500);
        }
      } catch (error) {
        showMessage("An error occurred. Please try again.", "danger");
        console.error("Found item report error:", error);
      }
    });
  }

  // Profile Page
  if (window.location.pathname.includes("profile.html")) {
    if (!checkAuth()) return;

    const loadProfile = async () => {
      try {
        const token = localStorage.getItem("token");
        const user = JSON.parse(localStorage.getItem("user"));

        // Display user info
        if (user) {
          document.getElementById("profile-name").textContent = user.username;
          document.getElementById("profile-email").textContent = user.email;
          document.getElementById("profile-rollno").textContent = user.rollNo;
          document.getElementById("profile-phone").textContent = user.phone;
          document.getElementById("profile-dept").textContent = user.department;
          if (user.idCard) {
            document.getElementById("profile-image").src = user.idCard;
          }
        }

        // Load user's posts
        const res = await fetch("/api/user-posts", {
          headers: {
            Authorization: token,
          },
        });

        if (res.ok) {
          const posts = await res.json();
          const lostItemsTable = document.getElementById("lost-items");
          const foundItemsTable = document.getElementById("found-items");

          // Clear existing rows
          lostItemsTable.innerHTML = "";
          foundItemsTable.innerHTML = "";

          // Populate tables
          posts.forEach((post) => {
            const row = document.createElement("tr");
            row.innerHTML = `
              <td>${new Date(post.date).toLocaleDateString()}</td>
              <td>${post.place}</td>
              <td>${post.time}</td>
              <td>${post.status}</td>
            `;

            if (post.type === "lost") {
              lostItemsTable.appendChild(row);
            } else {
              foundItemsTable.appendChild(row);
            }
          });
        }
      } catch (error) {
        console.error("Profile load error:", error);
        showMessage("Failed to load profile data", "danger");
      }
    };

    loadProfile();
  }

  // Index Page Functionality
  if (
    window.location.pathname === "/" ||
    window.location.pathname === "/index.html"
  ) {
    // About text animation
    const aboutText = document.getElementById("aboutText");
    if (aboutText) {
      const observer1 = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              aboutText.classList.add("show");
            }
          });
        },
        { threshold: 0.5 }
      );
      observer1.observe(aboutText);
    }

    // Load all items when page loads
    const loadItems = async () => {
      try {
        const res = await fetch("/api/all-items");
        const data = await res.json();

        if (res.ok) {
          displayItems(data.lostItems, "lost-items-container");
          displayItems(data.foundItems, "found-items-container");
        }
      } catch (error) {
        console.error("Error loading items:", error);
      }
    };

    const displayItems = (items, containerId) => {
      const container = document.getElementById(containerId);
      if (!container) return;

      container.innerHTML = "";

      if (items.length === 0) {
        container.innerHTML = "<p>No items found.</p>";
        return;
      }

      items.forEach((item) => {
        const itemCard = document.createElement("div");
        itemCard.className = "item-card";
        itemCard.innerHTML = `
          <img src="${item.image}" alt="${item.type} item" class="item-image">
          <div class="item-details">
            <h4>${item.type === "lost" ? "Lost" : "Found"} at ${item.place}</h4>
            <p>Reported on ${new Date(item.date).toLocaleDateString()}</p>
            <div class="item-meta">
              <span>Time: ${item.time}</span>
              <span>Status: ${item.status}</span>
            </div>
          </div>
        `;
        container.appendChild(itemCard);
      });
    };

    // Set up navigation buttons
    const setupNavButtons = () => {
      const loginBtn = document.querySelector(".login-btn");
      const registerBtn = document.querySelector(".register-btn");
      const reportLostBtn = document.querySelector(".cta-buttons .primary");
      const browseFoundBtn = document.querySelector(".cta-buttons .secondary");

      if (loginBtn) {
        loginBtn.addEventListener("click", () => {
          window.location.href = "login.html";
        });
      }

      if (registerBtn) {
        registerBtn.addEventListener("click", () => {
          window.location.href = "register.html";
        });
      }

      if (reportLostBtn) {
        reportLostBtn.addEventListener("click", () => {
          if (localStorage.getItem("token")) {
            window.location.href = "post-lost.html";
          } else {
            window.location.href = "login.html";
          }
        });
      }

      if (browseFoundBtn) {
        browseFoundBtn.addEventListener("click", () => {
          if (localStorage.getItem("token")) {
            window.location.href = "post-found.html";
          } else {
            window.location.href = "login.html";
          }
        });
      }
    };

    // Initialize index page
    loadItems();
    setupNavButtons();

    // Auto-refresh items every 30 seconds
    setInterval(loadItems, 30000);
  }
});

below is index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Campus Lost & Found</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      html {
        scroll-behavior: smooth;
      }
      body {
        font-family: "Poppins", sans-serif;
        background: linear-gradient(135deg, #e3f2fd, #ffffff);
        color: #333;
      }

      nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 2rem;
        background-color: #0d47a1;
        color: white;
        position: sticky;
        top: 0;
        z-index: 1000;
      }
      .nav-left h1 {
        font-size: 1.8rem;
      }
      .nav-right button {
        margin-left: 1rem;
        padding: 0.6rem 1rem;
        border: none;
        border-radius: 8px;
        font-size: 0.95rem;
        cursor: pointer;
        transition: 0.3s;
      }
      .login-btn {
        background-color: transparent;
        border: 2px solid white;
        color: white;
      }
      .login-btn:hover {
        background-color: white;
        color: #0d47a1;
      }
      .register-btn {
        background-color: #ffffff;
        color: #0d47a1;
        font-weight: 600;
      }
      .register-btn:hover {
        background-color: #bbdefb;
      }

      header {
        text-align: center;
        padding: 4rem 1rem 2rem;
        background: url("https://images.unsplash.com/photo-1523050854058-8df90110c9f1")
          center/cover no-repeat;
        color: white;
      }
      header h2 {
        font-size: 3rem;
        margin-bottom: 1rem;
        text-shadow: 2px 2px #000;
      }
      header p {
        font-size: 1.2rem;
        max-width: 700px;
        margin: auto;
      }
      .cta-buttons {
        margin-top: 2rem;
      }
      .cta-buttons button {
        padding: 0.8rem 1.5rem;
        margin: 0 1rem;
        font-size: 1rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: 0.3s;
      }
      .cta-buttons .primary {
        background-color: #ffffff;
        color: #0d47a1;
        font-weight: bold;
      }
      .cta-buttons .primary:hover {
        background-color: #bbdefb;
      }
      .cta-buttons .secondary {
        background-color: transparent;
        border: 2px solid white;
        color: white;
      }
      .cta-buttons .secondary:hover {
        background-color: white;
        color: #0d47a1;
      }

      .main-container {
        max-width: 1100px;
        margin: 4rem auto;
        padding: 1rem;
      }

      .section-title {
        text-align: center;
        font-size: 2rem;
        margin-bottom: 2rem;
        color: #0d47a1;
      }

      .items-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        max-height: 600px;
        overflow-y: auto;
        padding: 1rem;
        background-color: #f5f5f5;
        border-radius: 10px;
      }

      .item-card {
        background-color: white;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
      }

      .item-card:hover {
        transform: translateY(-5px);
      }

      .item-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 8px;
      }

      .item-details {
        margin-top: 1rem;
      }

      .item-details h4 {
        color: #0d47a1;
        margin-bottom: 0.5rem;
      }

      .item-meta {
        display: flex;
        justify-content: space-between;
        color: #666;
        font-size: 0.9rem;
        margin-top: 0.5rem;
      }

      .about-section,
      .testimonials-section,
      .faq-section {
        padding: 5rem 2rem;
        background: #f9f9f9;
        text-align: center;
      }

      .about-text {
        font-size: 1.1rem;
        line-height: 1.7;
        max-width: 800px;
        margin: auto;
        opacity: 0;
        transform: translateY(40px);
        transition: all 1s ease-in-out;
      }

      .about-text.show {
        opacity: 1;
        transform: translateY(0);
      }

      .testimonial {
        max-width: 800px;
        margin: 2rem auto;
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
        font-style: italic;
        color: #333;
      }

      .faq {
        max-width: 800px;
        margin: 1rem auto;
        text-align: left;
      }

      .faq h4 {
        color: #0d47a1;
        margin-bottom: 0.5rem;
      }

      .faq p {
        margin-bottom: 1.5rem;
        color: #555;
      }

      .footer {
        margin-top: 4rem;
        padding: 2rem;
        background-color: #0d47a1;
        text-align: center;
        font-size: 0.95rem;
        color: white;
      }

      @media (max-width: 600px) {
        nav {
          flex-direction: column;
          align-items: flex-start;
        }

        .nav-right {
          margin-top: 1rem;
        }
      }
    </style>
  </head>
  <body>
    <nav>
      <div class="nav-left">
        <h1>🎒 Campus Lost & Found Bulletin</h1>
      </div>
      <div class="nav-right">
        <button class="login-btn">Login</button>
        <button class="register-btn">Register</button>
      </div>
    </nav>

    <header>
      <h2>Helping Students Reunite with Their Lost Items</h2>
      <p>
        Report, search, and find items around the university campus with ease.
      </p>
      <div class="cta-buttons">
        <button class="primary">Report Lost</button>
        <button class="secondary">Browse Found</button>
      </div>
    </header>

    <div class="main-container">
      <h3 class="section-title">Lost Items</h3>
      <div class="items-container" id="lost-items-container"></div>

      <h3 class="section-title" style="margin-top: 3rem">Found Items</h3>
      <div class="items-container" id="found-items-container"></div>
    </div>

    <section class="about-section" id="about">
      <h3 class="section-title">About the Project</h3>
      <p class="about-text" id="aboutText">
        This Lost & Found web application is designed to help university
        students easily report, search, and track lost and found items within
        campus grounds. Whether it's a misplaced ID card, a found USB drive, or
        an umbrella someone left in the cafeteria — this system helps students
        reconnect with their belongings. Built using modern web technologies
        (HTML, CSS, PHP, MySQL), the platform ensures both ease of use and
        security for its users.
      </p>
    </section>

    <section class="testimonials-section">
      <h3 class="section-title">What Students Say</h3>
      <div class="testimonial">
        "I found my calculator within hours of reporting! This tool is a
        life-saver." – Arman, BUP
      </div>
      <div class="testimonial">
        "I uploaded a lost wallet and someone contacted me in a day. Amazing
        initiative." – Nusaiba, DU
      </div>
    </section>

    <section class="faq-section">
      <h3 class="section-title">Frequently Asked Questions</h3>
      <div class="faq">
        <h4>❓ How do I report a lost item?</h4>
        <p>
          Click on "Report Lost" and fill in the necessary details along with
          any photo you may have.
        </p>
        <h4>❓ What if I find something?</h4>
        <p>
          Use the "Report Found" feature and share where and when you found it.
          Keep the item safe until claimed.
        </p>
        <h4>❓ Is my information secure?</h4>
        <p>
          Yes, we store all user data securely and do not share personal
          information without consent.
        </p>
      </div>
    </section>

    <div class="footer">
      &copy; 2025 Campus Lost & Found | Built with ❤ by Students |
      <a href="#" style="color: #bbdefb">Privacy Policy</a> |
      <a href="#" style="color: #bbdefb">Contact</a>
    </div>

    <script>
      // About text animation
      const aboutText = document.getElementById("aboutText");
      const observer1 = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              aboutText.classList.add("show");
            }
          });
        },
        { threshold: 0.5 }
      );
      observer1.observe(aboutText);

      // Load all items when page loads
      const loadItems = async () => {
        try {
          const res = await fetch("/api/all-items");
          const data = await res.json();

          if (res.ok) {
            displayItems(data.lostItems, "lost-items-container");
            displayItems(data.foundItems, "found-items-container");
          }
        } catch (error) {
          console.error("Error loading items:", error);
        }
      };

      const displayItems = (items, containerId) => {
        const container = document.getElementById(containerId);
        container.innerHTML = "";

        if (items.length === 0) {
          container.innerHTML = "<p>No items found.</p>";
          return;
        }

        items.forEach((item) => {
          const itemCard = document.createElement("div");
          itemCard.className = "item-card";
          itemCard.innerHTML = `
            <img src="${item.image}" alt="${item.type} item" class="item-image">
            <div class="item-details">
              <h4>${item.type === "lost" ? "Lost" : "Found"} at ${item.place}</h4>
              <p>Reported on ${new Date(item.date).toLocaleDateString()}</p>
              <div class="item-meta">
                <span>Time: ${item.time}</span>
                <span>Status: ${item.status}</span>
              </div>
            </div>
          `;
          container.appendChild(itemCard);
        });
      };

      window.addEventListener("load", loadItems);

      // Redirects for buttons
      document.querySelector(".login-btn")?.addEventListener("click", () => {
        window.location.href = "login.html";
      });

      document.querySelector(".register-btn")?.addEventListener("click", () => {
        window.location.href = "register.html";
      });

      document
        .querySelector(".cta-buttons .primary")
        ?.addEventListener("click", () => {
          window.location.href = "post-lost.html";
        });

      document
        .querySelector(".cta-buttons .secondary")
        ?.addEventListener("click", () => {
          window.location.href = "post-found.html";
        });
    </script>
  </body>
</html>
